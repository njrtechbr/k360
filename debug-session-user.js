const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugSessionUser() {
  console.log('üîç Debugando problema de sess√£o de usu√°rio...\n');
  
  try {
    // Simular uma chamada √† API para ver o que acontece
    const response = await fetch('http://localhost:3000/api/attendants/import', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        attendants: [],
        fileName: 'test.csv'
      })
    });

    const result = await response.json();
    
    console.log('üì° Resposta da API:');
    console.log(`   Status: ${response.status}`);
    console.log(`   Dados:`, result);
    
    if (response.status === 401) {
      console.log('\n‚ùå Erro de autoriza√ß√£o detectado!');
      console.log('üí° Poss√≠veis causas:');
      console.log('   1. Usu√°rio n√£o est√° logado');
      console.log('   2. Sess√£o expirou');
      console.log('   3. ID do usu√°rio na sess√£o n√£o existe no banco');
      console.log('\nüîß Solu√ß√µes:');
      console.log('   1. Fa√ßa logout e login novamente');
      console.log('   2. Verifique se o servidor est√° rodando');
      console.log('   3. Limpe os cookies do navegador');
    }
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log('‚ùå Servidor n√£o est√° rodando!');
      console.log('üí° Execute: npm run dev');
    } else {
      console.error('‚ùå Erro ao testar API:', error.message);
    }
  }
  
  // Listar todos os usu√°rios dispon√≠veis
  console.log('\nüë• Usu√°rios dispon√≠veis no sistema:');
  const users = await prisma.user.findMany({
    select: {
      id: true,
      name: true,
      email: true,
      role: true
    }
  });
  
  users.forEach((user, index) => {
    console.log(`   ${index + 1}. ${user.name} (${user.email}) - ${user.role}`);
    console.log(`      ID: ${user.id}`);
  });
  
  console.log('\nüí° Para resolver o problema:');
  console.log('   1. Certifique-se de estar logado com um dos usu√°rios acima');
  console.log('   2. Se o problema persistir, fa√ßa logout e login novamente');
  console.log('   3. Verifique se o NextAuth est√° configurado corretamente');
  
} catch (error) {
  console.error('‚ùå Erro:', error);
} finally {
  await prisma.$disconnect();
}

debugSessionUser();