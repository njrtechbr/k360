generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String
  email             String             @unique
  password          String?
  role              Role               @default(USUARIO)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  attendantImports  AttendantImport[]
  evaluationImports EvaluationImport[]
  sessions          Session[]
  modules           Module[]           @relation("UserModules")
  createdXpTypes    XpTypeConfig[]     @relation("XpTypeCreator")
  grantedXp         XpGrant[]          @relation("XpGranter")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Module {
  id          String  @id
  name        String
  description String
  path        String
  active      Boolean @default(true)
  users       User[]  @relation("UserModules")
}

model Attendant {
  id                   String                @id @default(cuid())
  name                 String
  email                String                @unique
  funcao               String
  setor                String
  status               String
  avatarUrl            String?
  telefone             String
  portaria             String?
  situacao             String?
  dataAdmissao         DateTime
  dataNascimento       DateTime
  rg                   String
  cpf                  String                @unique
  importId             String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  import               AttendantImport?      @relation(fields: [importId], references: [id])
  evaluations          Evaluation[]
  unlockedAchievements UnlockedAchievement[]
  xpGrants             XpGrant[]
}

model Evaluation {
  id          String            @id @default(cuid())
  attendantId String
  nota        Int
  comentario  String
  data        DateTime
  xpGained    Float
  importId    String?
  createdAt   DateTime          @default(now())
  attendant   Attendant         @relation(fields: [attendantId], references: [id], onDelete: Cascade)
  import      EvaluationImport? @relation(fields: [importId], references: [id])
}

model XpEvent {
  id          String              @id @default(cuid())
  attendantId String
  points      Float
  basePoints  Float
  multiplier  Float
  reason      String
  date        DateTime
  type        String
  relatedId   String
  seasonId    String?
  season      GamificationSeason? @relation(fields: [seasonId], references: [id], onDelete: SetNull)
  xpGrant     XpGrant?
  createdAt   DateTime            @default(now())
}

model XpTypeConfig {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  points      Int
  active      Boolean    @default(true)
  category    String     @default("general")
  icon        String     @default("star")
  color       String     @default("#3B82F6")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String
  creator     User       @relation("XpTypeCreator", fields: [createdBy], references: [id])
  xpGrants    XpGrant[]
}

model XpGrant {
  id            String       @id @default(cuid())
  attendantId   String
  typeId        String
  points        Int
  justification String?
  grantedBy     String
  grantedAt     DateTime     @default(now())
  xpEventId     String       @unique
  attendant     Attendant    @relation(fields: [attendantId], references: [id])
  type          XpTypeConfig @relation(fields: [typeId], references: [id])
  granter       User         @relation("XpGranter", fields: [grantedBy], references: [id])
  xpEvent       XpEvent      @relation(fields: [xpEventId], references: [id])
}

model GamificationConfig {
  id                 String   @id @default("main")
  ratingScore1       Int      @default(-5)
  ratingScore2       Int      @default(-2)
  ratingScore3       Int      @default(1)
  ratingScore4       Int      @default(3)
  ratingScore5       Int      @default(5)
  globalXpMultiplier Float    @default(1)
  updatedAt          DateTime @updatedAt
  seasons            Json     @default("[]")
}

model AchievementConfig {
  id          String   @id
  title       String
  description String
  xp          Int
  active      Boolean  @default(true)
  icon        String
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LevelTrackConfig {
  level       Int      @id
  title       String
  description String
  active      Boolean  @default(true)
  icon        String
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GamificationSeason {
  id                   String                @id @default(cuid())
  name                 String
  startDate            DateTime
  endDate              DateTime
  active               Boolean
  xpMultiplier         Float
  xpEvents             XpEvent[]
  unlockedAchievements UnlockedAchievement[]
  createdAt            DateTime              @default(now())
}

model UnlockedAchievement {
  id            String              @id @default(cuid())
  attendantId   String
  achievementId String
  unlockedAt    DateTime            @default(now())
  xpGained      Float?              @default(0)
  seasonId      String?
  attendant     Attendant           @relation(fields: [attendantId], references: [id], onDelete: Cascade)
  season        GamificationSeason? @relation(fields: [seasonId], references: [id], onDelete: SetNull)

  @@unique([attendantId, achievementId, seasonId])
}

model AttendantImport {
  id           String      @id @default(cuid())
  importedById String
  importedAt   DateTime
  fileName     String
  attendants   Attendant[]
  importedBy   User        @relation(fields: [importedById], references: [id])
}

model EvaluationImport {
  id           String       @id @default(cuid())
  importedById String
  importedAt   DateTime
  fileName     String
  attendantMap Json
  evaluations  Evaluation[]
  importedBy   User         @relation(fields: [importedById], references: [id])
}

model Funcao {
  name String @id @unique
}

model Setor {
  name String @id @unique
}

enum Role {
  SUPERADMIN
  ADMIN
  SUPERVISOR
  USUARIO
}
