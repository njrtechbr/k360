{
  "enabled": true,
  "name": "Database Access Helper",
  "description": "Provides guidance on accessing the PostgreSQL database using Prisma Studio for visual management or node-postgres for direct client connections",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "prisma/schema.prisma",
      "package.json",
      ".env",
      "src/lib/db.ts",
      "src/services/*.ts"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "The user is working with database access. Help them understand how to:\n\n1. Use Prisma Studio for visual database management:\n   - Run `npx prisma studio` to open the web interface\n   - Browse and edit data through the GUI\n   - View relationships and schema structure\n\n2. Use node-postgres (pg) for direct database connections:\n   - Install with `npm install pg` and `npm install @types/pg` for TypeScript\n   - Create connection using DATABASE_URL from .env\n   - Write raw SQL queries or use connection pooling\n   - Handle async/await patterns for non-blocking operations\n\n3. Consider the existing Prisma setup:\n   - The project already uses Prisma ORM with PostgreSQL\n   - Database schema is defined in prisma/schema.prisma\n   - Prisma Client is auto-generated and available throughout the app\n   - Consider if direct pg access is needed or if Prisma Client suffices\n\nProvide code examples for both approaches and explain when to use each method."
  }
}