/**
 * Script para testar o sistema de notifica√ß√µes de XP avulso
 * 
 * Este script testa:
 * 1. Concess√£o de XP avulso via API
 * 2. Verifica√ß√£o de notifica√ß√µes geradas
 * 3. Teste de subida de n√≠vel
 * 4. Teste de conquistas desbloqueadas
 */

const BASE_URL = 'http://localhost:3000';

// Fun√ß√£o para fazer requisi√ß√µes autenticadas
async function makeAuthenticatedRequest(endpoint, options = {}) {
  const response = await fetch(`${BASE_URL}${endpoint}`, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    throw new Error(`HTTP ${response.status}: ${errorData.error || response.statusText}`);
  }

  return response.json();
}

// Fun√ß√£o para testar concess√£o de XP avulso
async function testXpAvulsoGrant() {
  console.log('\nüéØ Testando concess√£o de XP avulso...');

  try {
    // 1. Buscar atendentes dispon√≠veis
    console.log('üìã Buscando atendentes...');
    const attendants = await makeAuthenticatedRequest('/api/attendants');
    
    if (!attendants || attendants.length === 0) {
      throw new Error('Nenhum atendente encontrado');
    }

    const testAttendant = attendants.find(a => a.status === 'Ativo');
    if (!testAttendant) {
      throw new Error('Nenhum atendente ativo encontrado');
    }

    console.log(`‚úÖ Atendente selecionado: ${testAttendant.name} (${testAttendant.id})`);

    // 2. Buscar tipos de XP dispon√≠veis
    console.log('üéÅ Buscando tipos de XP...');
    const xpTypes = await makeAuthenticatedRequest('/api/gamification/xp-types');
    
    if (!xpTypes || xpTypes.length === 0) {
      throw new Error('Nenhum tipo de XP encontrado');
    }

    const activeXpTypes = xpTypes.filter(type => type.active);
    if (activeXpTypes.length === 0) {
      throw new Error('Nenhum tipo de XP ativo encontrado');
    }

    const testXpType = activeXpTypes[0];
    console.log(`‚úÖ Tipo de XP selecionado: ${testXpType.name} (+${testXpType.points} XP)`);

    // 3. Verificar XP atual do atendente
    console.log('üìä Verificando XP atual...');
    let currentXp = 0;
    try {
      const xpResponse = await makeAuthenticatedRequest(`/api/gamification/attendants/${testAttendant.id}/xp-total`);
      currentXp = xpResponse.totalXp || 0;
    } catch (error) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel obter XP atual, assumindo 0');
    }
    
    console.log(`üìà XP atual: ${currentXp}`);

    // 4. Conceder XP avulso
    console.log('üéÅ Concedendo XP avulso...');
    const grantData = {
      attendantId: testAttendant.id,
      typeId: testXpType.id,
      justification: 'Teste automatizado do sistema de notifica√ß√µes de XP avulso'
    };

    const grantResult = await makeAuthenticatedRequest('/api/gamification/xp-grants', {
      method: 'POST',
      body: JSON.stringify(grantData)
    });

    console.log('‚úÖ XP concedido com sucesso!');
    console.log(`üìã ID da concess√£o: ${grantResult.data.id}`);
    console.log(`üéØ Pontos concedidos: ${grantResult.data.points}`);
    
    // 5. Verificar dados de notifica√ß√£o
    if (grantResult.data.notification) {
      const notification = grantResult.data.notification;
      console.log('\nüîî Dados de notifica√ß√£o:');
      console.log(`   üíé XP: ${notification.xpAmount}`);
      console.log(`   üè∑Ô∏è  Tipo: ${notification.typeName}`);
      console.log(`   üìù Justificativa: ${notification.justification || 'N/A'}`);
      
      if (notification.levelUp) {
        console.log(`   üéâ SUBIU DE N√çVEL! ${notification.levelUp.previousLevel} ‚Üí ${notification.levelUp.newLevel}`);
        console.log(`   üìä XP Total: ${notification.levelUp.totalXp}`);
      }
      
      if (notification.achievementsUnlocked && notification.achievementsUnlocked.length > 0) {
        console.log(`   üèÜ CONQUISTAS DESBLOQUEADAS: ${notification.achievementsUnlocked.length}`);
        notification.achievementsUnlocked.forEach((achievement, index) => {
          console.log(`      ${index + 1}. ${achievement.title} - ${achievement.description}`);
        });
      }
    }

    // 6. Verificar XP atualizado
    console.log('\nüìä Verificando XP atualizado...');
    try {
      const updatedXpResponse = await makeAuthenticatedRequest(`/api/gamification/attendants/${testAttendant.id}/xp-total`);
      const newXp = updatedXpResponse.totalXp || 0;
      const xpGain = newXp - currentXp;
      
      console.log(`üìà XP anterior: ${currentXp}`);
      console.log(`üìà XP atual: ${newXp}`);
      console.log(`üìà Ganho: +${xpGain} XP`);
      
      if (xpGain === testXpType.points) {
        console.log('‚úÖ XP atualizado corretamente!');
      } else {
        console.log(`‚ö†Ô∏è  XP n√£o confere. Esperado: +${testXpType.points}, Obtido: +${xpGain}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar XP atualizado:', error.message);
    }

    return {
      success: true,
      attendant: testAttendant,
      xpType: testXpType,
      grant: grantResult.data,
      notification: grantResult.data.notification
    };

  } catch (error) {
    console.error('‚ùå Erro ao testar concess√£o de XP:', error.message);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para testar hist√≥rico de concess√µes
async function testXpAvulsoHistory(attendantId) {
  console.log('\nüìö Testando hist√≥rico de concess√µes...');

  try {
    const history = await makeAuthenticatedRequest(`/api/gamification/xp-grants/attendant/${attendantId}`);
    
    console.log(`‚úÖ Hist√≥rico obtido: ${history.length} concess√µes`);
    
    if (history.length > 0) {
      const latest = history[0];
      console.log('üìã √öltima concess√£o:');
      console.log(`   üéÅ Tipo: ${latest.type.name}`);
      console.log(`   üíé Pontos: ${latest.points}`);
      console.log(`   üë§ Concedido por: ${latest.granter.name}`);
      console.log(`   üìÖ Data: ${new Date(latest.grantedAt).toLocaleString('pt-BR')}`);
      console.log(`   üìù Justificativa: ${latest.justification || 'N/A'}`);
    }

    return { success: true, history };
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico:', error.message);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o para testar estat√≠sticas
async function testXpAvulsoStatistics() {
  console.log('\nüìä Testando estat√≠sticas de XP avulso...');

  try {
    const stats = await makeAuthenticatedRequest('/api/gamification/xp-grants/statistics');
    
    console.log('‚úÖ Estat√≠sticas obtidas:');
    console.log(`   üìà Total de concess√µes: ${stats.totalGrants}`);
    console.log(`   üíé Total de pontos: ${stats.totalPoints}`);
    console.log(`   üìä M√©dia por concess√£o: ${stats.averagePoints.toFixed(2)}`);
    
    if (stats.grantsByType && stats.grantsByType.length > 0) {
      console.log('   üè∑Ô∏è  Por tipo:');
      stats.grantsByType.forEach(type => {
        console.log(`      - ${type.typeName}: ${type.count} concess√µes (${type.totalPoints} pontos)`);
      });
    }

    return { success: true, stats };
  } catch (error) {
    console.error('‚ùå Erro ao buscar estat√≠sticas:', error.message);
    return { success: false, error: error.message };
  }
}

// Fun√ß√£o principal
async function main() {
  console.log('üöÄ Iniciando testes do sistema de notifica√ß√µes de XP avulso...');
  console.log('=' .repeat(60));

  // Teste 1: Concess√£o de XP
  const grantTest = await testXpAvulsoGrant();
  
  if (grantTest.success) {
    // Teste 2: Hist√≥rico (se a concess√£o foi bem-sucedida)
    await testXpAvulsoHistory(grantTest.attendant.id);
    
    // Teste 3: Estat√≠sticas
    await testXpAvulsoStatistics();
  }

  console.log('\n' + '=' .repeat(60));
  console.log('üèÅ Testes conclu√≠dos!');
  
  if (grantTest.success) {
    console.log('‚úÖ Sistema de notifica√ß√µes funcionando corretamente!');
    
    if (grantTest.notification) {
      console.log('\nüí° Para testar as notifica√ß√µes no frontend:');
      console.log('1. Abra o perfil do atendente no navegador');
      console.log('2. Conceda XP avulso atrav√©s da interface');
      console.log('3. Observe as notifica√ß√µes toast e o badge de notifica√ß√µes');
      console.log('4. Verifique se conquistas e subidas de n√≠vel s√£o destacadas');
    }
  } else {
    console.log('‚ùå Problemas encontrados no sistema de notifica√ß√µes');
  }
}

// Executar testes
main().catch(console.error);