import { PrismaClient } from '@prisma/client';
import { DatabaseService } from '../src/lib/database';
import { UserService } from '../src/services/userService';

const prisma = new PrismaClient();

async function migrationHelper() {
  console.log('üîÑ Executando helper de migra√ß√£o...\n');

  try {
    // 1. Usar Prisma para opera√ß√µes padr√£o
    console.log('1Ô∏è‚É£ Verificando usu√°rios com Prisma...');
    const users = await UserService.findAll();
    console.log(`   Encontrados ${users.length} usu√°rios`);

    // 2. Usar pg para an√°lise complexa
    console.log('\n2Ô∏è‚É£ Gerando relat√≥rio com pg...');
    const stats = await DatabaseService.getUserStatsReport();
    console.log('   Estat√≠sticas por usu√°rio:');
    stats.forEach(stat => {
      console.log(`   - ${stat.name}: ${stat.total_evaluations} avalia√ß√µes, ${stat.total_xp} XP`);
    });

    // 3. Usar Prisma Studio para verifica√ß√£o manual
    console.log('\n3Ô∏è‚É£ Para verifica√ß√£o visual:');
    console.log('   Execute: npx prisma studio');
    console.log('   Acesse: http://localhost:5555');

    // 4. Limpeza de dados √≥rf√£os com pg
    console.log('\n4Ô∏è‚É£ Limpando dados √≥rf√£os...');
    await DatabaseService.cleanOrphanedData();
    console.log('   ‚úÖ Limpeza conclu√≠da');

    // 5. Verifica√ß√£o final com Prisma
    console.log('\n5Ô∏è‚É£ Verifica√ß√£o final...');
    const finalCount = await prisma.user.count();
    const evaluationCount = await prisma.evaluation.count();
    const xpEventCount = await prisma.xpEvent.count();
    
    console.log(`   Usu√°rios: ${finalCount}`);
    console.log(`   Avalia√ß√µes: ${evaluationCount}`);
    console.log(`   Eventos XP: ${xpEventCount}`);

  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
    await DatabaseService.close();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  migrationHelper().catch(console.error);
}

export { migrationHelper };